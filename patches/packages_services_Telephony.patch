From 382a0c12f50b088f084d5beebd30bea88189bc93 Mon Sep 17 00:00:00 2001
From: ishantvivek <ishantvivek1311@gmail.com>
Date: Sat, 1 Oct 2016 05:22:41 +0000
Subject: [PATCH] Telephony: HACK: enable WCDMA only setting * Samsung stock
 allows WCDMA only

---
 res/values/strings.xml                           | 11 ++++++++---
 src/com/android/phone/MobileNetworkSettings.java | 15 +++++++++++++--
 2 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 34cdeb5..bf1cbc1 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -465,6 +465,9 @@
    <string name="callFailed_incoming_cb_enabled">Party has barred all Incoming calls.</string>
    <!-- In-call screen: status label for an incoming call that is not answered and forwarded  -->
    <string name="callUnanswered_forwarded">Call Unanswered and Forwarded</string>
+    <string name="preferred_network_mode_wcdma_only_choice">WCDMA only</string>
+    <string name="preferred_network_mode_gsm_only_choice">GSM only</string>
+    <string name="preferred_network_mode_gsm_wcdma_preferred_choice">GSM/WCDMA preferred</string>
 
     <string-array name="preferred_network_mode_choices" translatable="false">
         <item>LTE/TDSCDMA/CDMA/EVDO/GSM/WCDMA </item>
@@ -707,12 +710,14 @@
     </string-array>
 
     <string-array name="enabled_networks_except_lte_choices" translatable="false">
-        <item>@string/network_3G</item>
-        <item>@string/network_2G</item>
+        <item>@string/preferred_network_mode_wcdma_only_choice</item>
+        <item>@string/preferred_network_mode_gsm_only_choice</item>
+        <item>@string/preferred_network_mode_gsm_wcdma_preferred_choice</item>
     </string-array>
     <string-array name="enabled_networks_except_lte_values" translatable="false">
-        <item>"0"</item>
+        <item>"2"</item>
         <item>"1"</item>
+        <item>"0"</item>
     </string-array>
 
     <string-array name="enabled_networks_except_gsm_lte_choices" translatable="false">
diff --git a/src/com/android/phone/MobileNetworkSettings.java b/src/com/android/phone/MobileNetworkSettings.java
index 56b6390..a2e0821 100644
--- a/src/com/android/phone/MobileNetworkSettings.java
+++ b/src/com/android/phone/MobileNetworkSettings.java
@@ -881,6 +881,7 @@ public boolean onPreferenceChange(Preference preference, Object objValue) {
                 switch (buttonNetworkMode) {
                     case Phone.NT_MODE_WCDMA_PREF:
                     case Phone.NT_MODE_GSM_ONLY:
+                    case Phone.NT_MODE_WCDMA_ONLY:
                     case Phone.NT_MODE_LTE_GSM_WCDMA:
                     case Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
                     case Phone.NT_MODE_CDMA:
@@ -1106,12 +1107,22 @@ private void UpdateEnabledNetworksValueAndSummary(int NetworkMode) {
                 mButtonEnabledNetworks.setSummary(R.string.network_3G);
                 break;
             case Phone.NT_MODE_WCDMA_ONLY:
+                if (!mIsGlobalCdma) {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_WCDMA_ONLY));
+                    mButtonEnabledNetworks.setSummary(R.string.preferred_network_mode_wcdma_only_choice);
+                } else {
+                    mButtonEnabledNetworks.setValue(
+                            Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
+                    mButtonEnabledNetworks.setSummary(R.string.network_global);
+                }
+                break;
             case Phone.NT_MODE_GSM_UMTS:
             case Phone.NT_MODE_WCDMA_PREF:
                 if (!mIsGlobalCdma) {
                     mButtonEnabledNetworks.setValue(
                             Integer.toString(Phone.NT_MODE_WCDMA_PREF));
-                    mButtonEnabledNetworks.setSummary(R.string.network_3G);
+                    mButtonEnabledNetworks.setSummary(R.string.preferred_network_mode_gsm_wcdma_preferred_choice);
                 } else {
                     mButtonEnabledNetworks.setValue(
                             Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));
@@ -1122,7 +1133,7 @@ private void UpdateEnabledNetworksValueAndSummary(int NetworkMode) {
                 if (!mIsGlobalCdma) {
                     mButtonEnabledNetworks.setValue(
                             Integer.toString(Phone.NT_MODE_GSM_ONLY));
-                    mButtonEnabledNetworks.setSummary(R.string.network_2G);
+                    mButtonEnabledNetworks.setSummary(R.string.preferred_network_mode_gsm_only_choice);
                 } else {
                     mButtonEnabledNetworks.setValue(
                             Integer.toString(Phone.NT_MODE_LTE_CDMA_EVDO_GSM_WCDMA));

From 2597f074cde7adf54a245a40733ba9865182ab22 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 7 Sep 2016 05:31:16 +0300
Subject: [PATCH] On create, values need to be read from the RIL, not set

This causes problem on dual SIM phones where setting one SIM to
3G would cause the RIL to automatically change the other RIL to
2G.

In this case, when the setting saved is 3G for both SIM, whenever
the user switches tab, the tab the user switches to become 3G.
For example, when the user switches to Sim 2, Sim 2 becomes 3G.
And when the user switches back to Sim 1, Sim 1 becomes 3G. This
can be very confusing, not to mention that switching between
tabs should not cause the network mode to change.

The updateBody() call is removed to ensure that when SET is called,
the value is not immediately GET from the RIL as the RIL might not
finish updating the value yet and GET will return the old value,
resulting in the following behavior:

- User is on 2G
- User switches to 3G
- UI still displays "2G" due to updating value from RIL
- After a few seconds, UI displays "3G" because RIL update is
  finished.

Not sure what the call is for, but it's probably not used in GSM
phones. Care should be taken if this patch is to be applied to
other phones.

From: Pawit Pornkitprasan <p.pawit@gmail.com>
---
 src/com/android/phone/MobileNetworkSettings.java | 30 +++++++++++++++++++++---
 1 file changed, 27 insertions(+), 3 deletions(-)

diff --git a/src/com/android/phone/MobileNetworkSettings.java b/src/com/android/phone/MobileNetworkSettings.java
index a2e0821..7f00040 100644
--- a/src/com/android/phone/MobileNetworkSettings.java
+++ b/src/com/android/phone/MobileNetworkSettings.java
@@ -726,8 +726,7 @@ private void updateBody() {
         UpdatePreferredNetworkModeSummary(settingsNetworkMode);
         UpdateEnabledNetworksValueAndSummary(settingsNetworkMode);
         // Display preferred network type based on what modem returns b/18676277
-        mPhone.setPreferredNetworkType(settingsNetworkMode, mHandler
-                .obtainMessage(MyHandler.MESSAGE_SET_PREFERRED_NETWORK_TYPE));
+                mPhone.getPreferredNetworkType(mHandler.obtainMessage(MyHandler.MESSAGE_GET_PREFERRED_NETWORK_TYPE));
 
         /**
          * Enable/disable depending upon if there are any active subscriptions.
@@ -940,7 +939,6 @@ public boolean onPreferenceChange(Preference preference, Object objValue) {
             return true;
         }
 
-        updateBody();
         // always let the preference setting proceed.
         return true;
     }
@@ -948,6 +946,7 @@ public boolean onPreferenceChange(Preference preference, Object objValue) {
     private class MyHandler extends Handler {
 
         static final int MESSAGE_SET_PREFERRED_NETWORK_TYPE = 0;
+        static final int MESSAGE_GET_PREFERRED_NETWORK_TYPE = 1;
 
         @Override
         public void handleMessage(Message msg) {
@@ -955,6 +954,9 @@ public void handleMessage(Message msg) {
                 case MESSAGE_SET_PREFERRED_NETWORK_TYPE:
                     handleSetPreferredNetworkTypeResponse(msg);
                     break;
+                case MESSAGE_GET_PREFERRED_NETWORK_TYPE:
+                    handleGetPreferredNetworkTypeResponse(msg);
+                     break;
             }
         }
 
@@ -987,6 +989,28 @@ private void handleSetPreferredNetworkTypeResponse(Message msg) {
                 updatePreferredNetworkUIFromDb();
             }
         }
+
+        private void handleGetPreferredNetworkTypeResponse(Message msg) {
+            AsyncResult ar = (AsyncResult) msg.obj;
+            final int phoneSubId = mPhone.getSubId();
+
+            if (ar.exception == null) {
+                int networkMode = ((int[]) ar.result)[0];
+
+                // Store this in setting so onPreferenceChange would trigger even if
+                // network mode from modem does not equal saved network mode
+                android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
+                        android.provider.Settings.Global.PREFERRED_NETWORK_MODE + phoneSubId,
+                        networkMode );
+
+                UpdatePreferredNetworkModeSummary(networkMode);
+                UpdateEnabledNetworksValueAndSummary(networkMode);
+            } else {
+                if (DBG) {
+                    log("handleGetPreferredNetworkTypeResponse: exception in geting network mode.");
+                }
+            }
+        }
     }
 
     private void updatePreferredNetworkUIFromDb() {
