From de48c7e13eb4165736dfe218ab111053093629fa Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 31 Aug 2016 18:29:52 +0000
Subject: [PATCH] TelephonyManager: set properties in Broadcom-style as expected by RIL

---
 .../java/android/telephony/TelephonyManager.java   | 62 +++++++---------------
 1 file changed, 19 insertions(+), 43 deletions(-)

diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index 6e504d1..7012b70 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -3668,49 +3668,19 @@ public int getDefaultSim() {
      * @hide
      */
     public static void setTelephonyProperty(int phoneId, String property, String value) {
-        String propVal = "";
-        String p[] = null;
-        String prop = SystemProperties.get(property);
-
-        if (value == null) {
-            value = "";
-        }
-
-        if (prop != null) {
-            p = prop.split(",");
-        }
-
         if (!SubscriptionManager.isValidPhoneId(phoneId)) {
             Rlog.d(TAG, "setTelephonyProperty: invalid phoneId=" + phoneId +
-                    " property=" + property + " value: " + value + " prop=" + prop);
+                    " property=" + property + " value: " + value);
             return;
         }
 
-        for (int i = 0; i < phoneId; i++) {
-            String str = "";
-            if ((p != null) && (i < p.length)) {
-                str = p[i];
-            }
-            propVal = propVal + str + ",";
-        }
-
-        propVal = propVal + value;
-        if (p != null) {
-            for (int i = phoneId + 1; i < p.length; i++) {
-                propVal = propVal + "," + p[i];
-            }
-        }
-
-        if (property.length() > SystemProperties.PROP_NAME_MAX
-                || propVal.length() > SystemProperties.PROP_VALUE_MAX) {
-            Rlog.d(TAG, "setTelephonyProperty: property to long phoneId=" + phoneId +
-                    " property=" + property + " value: " + value + " propVal=" + propVal);
-            return;
+        if (phoneId > 0) {
+           property += "_" + phoneId;
         }
 
         Rlog.d(TAG, "setTelephonyProperty: success phoneId=" + phoneId +
-                " property=" + property + " value: " + value + " propVal=" + propVal);
-        SystemProperties.set(property, propVal);
+                " property=" + property + " value: " + value);
+        SystemProperties.set(property, value);
     }
 
     /**
@@ -3807,15 +3777,21 @@ public static boolean putIntAtIndex(android.content.ContentResolver cr,
      * @hide
      */
     public static String getTelephonyProperty(int phoneId, String property, String defaultVal) {
-        String propVal = null;
-        String prop = SystemProperties.get(property);
-        if ((prop != null) && (prop.length() > 0)) {
-            String values[] = prop.split(",");
-            if ((phoneId >= 0) && (phoneId < values.length) && (values[phoneId] != null)) {
-                propVal = values[phoneId];
-            }
+        if (!SubscriptionManager.isValidPhoneId(phoneId)) {
+            Rlog.d(TAG, "getTelephonyProperty: invalid phoneId=" + phoneId +
+                    " property=" + property);
+            return defaultVal;
         }
-        return propVal == null ? defaultVal : propVal;
+        if (phoneId > 0) {
+            property += "_" + phoneId;
+        }
+
+        String propVal = SystemProperties.get(property);
+
+        Rlog.d(TAG, "getTelephonyProperty: return propVal='" + propVal + "' phoneId=" + phoneId
+                + " property='" + property + "' defaultVal='" + defaultVal);
+
+        return propVal.isEmpty() ? defaultVal : propVal;
     }
 
     /** @hide */

From 6fa458e9f6f14ab73a5cff1c0f45a3866aed0c61 Mon Sep 17 00:00:00 2001
From: ishantvivek <ishantvivek1311@gmail.com>
Date: Thu, 29 Sep 2016 19:13:38 +0000
Subject: [PATCH] lmk: Refactor low memory killer values

[Forward port to  Nougat]
* Atm,lmk default values for 768mb ram &
480*800 display resolution
* isn't getting calculated properly,and not triggering
lmk on memory
* pressure instead get reboot. Evidence: LMK values for 32Bit is
calculated this way: mOomMinFree[i] = (int)(low + ((high-low)*scale)) Here scale=1
As float scale = scaleMem > scaleDisp ? scaleMem : scaleDisp; And scaleMem
is:float scaleMem = ((float)(mTotalMemMb-350))/(700-350); scaleDisp is: int
minSize = 480*800; // 384000
        int maxSize = 1280*800; // 1024000 230400 870400 .264
	        float scaleDisp =
		((float)(displayWidth*displayHeight)-minSize)/(maxSize-minSize)
Our displayWidth*displayHeight=38400,so scaleDisp=(38400-38400)=0.Hence scaleDisp
is 0. scaleMem=768-350/350=~1.19 So scaleMem>Scaledisp. Hence scalemem:scaledisp
is >1. Hence scaledisp would be 1. So final mOomMinFree[i] = (int)(high) and
high=mOomMinFreeHigh32Bit[i]; which is equal to private final int[]
mOomMinFreeHigh32Bit = new int[] {
	            61440, 76800, 92160,
		    107520, 137660, 174948
These values are kinda irrelevant for a 768mb ram. 240 mb min free for foreground app?Is this a joke? I
don't understand why these values dont create issues in 5.1.*, but in 6.0 because
of such high value!?(maybe some api change?) ,i think its not getting trigger
properly.This could be wrong but theortically it seems legit.I have modified these
values suitable for 768mb RAM.

* Also increased min free cached apps.

Signed-off-by: ishantvivek <ishantvivek1311@gmail.com>
---
 services/core/java/com/android/server/am/ProcessList.java | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/services/core/java/com/android/server/am/ProcessList.java b/services/core/java/com/android/server/am/ProcessList.java
index 475b155..059b10c 100644
--- a/services/core/java/com/android/server/am/ProcessList.java
+++ b/services/core/java/com/android/server/am/ProcessList.java
@@ -189,8 +189,8 @@
     // These are the low-end OOM level limits.  This is appropriate for an
     // HVGA or smaller phone with less than 512MB.  Values are in KB.
     private final int[] mOomMinFreeLow = new int[] {
-            12288, 18432, 24576,
-            36864, 43008, 49152
+            17920, 20480, 25600,
+            38400, 43008, 49152
     };
     // These are the high-end OOM level limits.  This is appropriate for a
     // 1280x800 or larger screen with around 1GB RAM.  Values are in KB.
@@ -264,7 +264,7 @@ private void updateOomLevels(int displayWidth, int displayHeight, boolean write)
                 if (i == 4) high = (high*3)/2;
                 else if (i == 5) high = (high*7)/4;
             }
-            mOomMinFree[i] = (int)(low + ((high-low)*scale));
+            mOomMinFree[i] = (int)(low);
         }
 
         if (minfree_abs >= 0) {

From 3df25dfbef0f394facb89fc1c64604a8c1a556ed Mon Sep 17 00:00:00 2001
From: ishantvivek <ishantvivek1311@gmail.com>
Date: Mon, 3 Oct 2016 04:03:16 +0000
Subject: [PATCH] KeyEvent: Add support for Home key wakeup Add Home key to list of wakeable buttons.

---
 core/java/android/view/KeyEvent.java | 1 +
 1 file changed, 1 insertion(+)

diff --git a/core/java/android/view/KeyEvent.java b/core/java/android/view/KeyEvent.java
index 990d553..9d8d825 100644
--- a/core/java/android/view/KeyEvent.java
+++ b/core/java/android/view/KeyEvent.java
@@ -1867,6 +1867,7 @@ public static final boolean isWakeKey(int keyCode) {
         switch (keyCode) {
             case KeyEvent.KEYCODE_BACK:
             case KeyEvent.KEYCODE_MENU:
+            case KeyEvent.KEYCODE_HOME:
             case KeyEvent.KEYCODE_WAKEUP:
             case KeyEvent.KEYCODE_PAIRING:
             case KeyEvent.KEYCODE_STEM_1:
